// app.tsx
// -------------------------------------------------------------------
import { Vibrant } from "node-vibrant/browser";
import gsap from "gsap";
import {
  ColorfulBackgroundGenerator,
  ColorfulBackgroundLayer,
} from "./helper/colorful-background-ts";

// ------------------------- MAIN --------------------------
async function main() {
  // Wait until Spicetify is ready.
  while (!Spicetify?.showNotification) {
    await new Promise((resolve) => setTimeout(resolve, 100));
  }

  // Initialize our theme extension.
  initializeThemeExtension();
}

// -------------- COVER ART & GRADIENT GENERATION ---------------
function applyGradientFromCoverArt(): void {
  const coverArt = document.querySelector<HTMLImageElement>(
    ".main-nowPlayingWidget-coverArt img"
  );

  if (!coverArt || !coverArt.src) {
    console.warn("Cover art not found or source is missing.");
    return;
  }

  const proxyUrl = getProxyImageUrl(coverArt.src);
  console.log("Using proxy URL for cover art:", proxyUrl);

  Vibrant.from(proxyUrl)
    .getPalette()
    .then((palette) => {
      if (!palette) {
        console.error("Palette extraction failed");
        return;
      }

      // Extract hex colors from the palette.
      let paletteHexes = Object.keys(palette)
        .filter((key) => palette[key]?.hex)
        .map((key) => palette[key]?.hex as string);

      // Ensure exactly 6 colors.
      if (paletteHexes.length < 6) {
        while (paletteHexes.length < 6) {
          paletteHexes.push(paletteHexes[0]);
        }
      } else if (paletteHexes.length > 6) {
        paletteHexes = paletteHexes.slice(0, 6);
      }

      // Generate six gradient layers with “smart” preset parameters.
      const layers: ColorfulBackgroundLayer[] = paletteHexes.map((hex, index) =>
        generateGradientLayer(hex, index, 6)
      );

      // Build, assign, and animate the gradient.
      generateDynamicGradient(layers);
    })
    .catch((error) => console.error("Error extracting colors:", error));
}

// ------- SMART GRADIENT LAYER GENERATION (for 6 colors) --------
function generateGradientLayer(
  hex: string,
  index: number,
  totalLayers: number
): ColorfulBackgroundLayer {
  const hsl = hexToHSL(hex); // h passed as degree; s and l as fractions (0–1)

  // When exactly 6 colors are available use preset parameters.
  // These presets are chosen so that the gradient layers are arranged
  // around the container (edges and corners) in a balanced way.
  let degree: number, posColor: number, posTransparency: number;
  if (totalLayers === 6) {
    const presets = [
      { degree: 325, posColor: 100, posTransparency: 0 }, // Top edge
      { degree: 225, posColor: 70, posTransparency: 80 }, // Top-right
      { degree: 155, posColor: 50, posTransparency: 70 }, // Bottom-right
      { degree: 55, posColor: 30, posTransparency: 65 }, // Bottom edge
      { degree: 25, posColor: 10, posTransparency: 60 }, // Bottom-left
      { degree: 0, posColor: 0, posTransparency: 55 }, // Top-left
    ];
    degree = presets[index].degree;
    posColor = presets[index].posColor;
    posTransparency = presets[index].posTransparency;
  } else {
    // Fallback for non-6 color cases: evenly space the layers.
    degree = (360 / totalLayers) * index;
    posColor = 100;
    posTransparency = 30;
  }

  return new ColorfulBackgroundLayer({
    degree: degree,
    hue: hsl.h,
    saturation: hsl.s,
    lightness: hsl.l,
    posColor: posColor,
    posTransparency: posTransparency,
  });
}

// -------------- HEX TO HSL CONVERSION (FRACTIONAL) --------------
function hexToHSL(hex: string): { h: number; s: number; l: number } {
  const r = parseInt(hex.slice(1, 3), 16) / 255;
  const g = parseInt(hex.slice(3, 5), 16) / 255;
  const b = parseInt(hex.slice(5, 7), 16) / 255;

  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  let h = 0,
    s = 0,
    l = (max + min) / 2;

  if (max !== min) {
    const d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = ((g - b) / d + (g < b ? 6 : 0)) * 60;
        break;
      case g:
        h = ((b - r) / d + 2) * 60;
        break;
      case b:
        h = ((r - g) / d + 4) * 60;
        break;
    }
  }

  return {
    h: Math.round(h),
    s: s, // keep as fraction (0–1)
    l: l, // keep as fraction (0–1)
  };
}

// ------------------ GRADIENT CONSTRUCTION & ANIMATION --------------
function generateDynamicGradient(layers: ColorfulBackgroundLayer[]): void {
  // Build a raw CSS string from each layer.
  const rawCSS = layers
    .map((layer, index) => {
      const isLast = index === layers.length - 1;
      return layer.getCSSProperty(isLast, "");
    })
    .join("");
  // Remove any trailing commas, semicolons, or extra whitespace.
  const gradientCSS = rawCSS.replace(/[,;]\s*$/, "");
  console.log("Final gradient CSS:", gradientCSS);

  // Target the container element.
  const container = document.querySelector<HTMLElement>(".Root__top-container");
  if (!container) {
    console.error("Container .Root__top-container not found.");
    return;
  }

  // Apply the cleaned gradient CSS as the inline background.
  container.style.background = gradientCSS;
  console.log("Applied container background:", container.style.background);

  // Animate the background change on the container using GSAP.
  gsap.to(container, {
    background: gradientCSS,
    duration: 1.5,
    ease: "power2.inOut",
    onUpdate: () => console.log("Gradient is morphing..."),
    onComplete: () => console.log("Gradient morph completed."),
  });
}

// ----------------- UTILITY FUNCTIONS ----------------------
function getProxyImageUrl(spotifyUri: string): string {
  return spotifyUri.replace("spotify:image:", "https://i.scdn.co/image/");
}

function initializeThemeExtension(): void {
  const nowPlayingBar = document.querySelector<HTMLElement>(
    ".main-nowPlayingWidget-trackInfo"
  );
  if (!nowPlayingBar) {
    console.error("Now-playing bar not found.");
    return;
  }
  console.log("Now-playing bar found:", nowPlayingBar);

  // Observe changes to update the gradient when the now-playing bar changes.
  const observer = new MutationObserver(() => {
    console.log("Now-playing bar content changed");
    applyGradientFromCoverArt();
  });
  observer.observe(nowPlayingBar, { childList: true, subtree: true });

  // Apply the initial gradient.
  applyGradientFromCoverArt();
}

export default main;
