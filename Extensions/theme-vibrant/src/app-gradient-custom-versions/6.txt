import { Vibrant } from "node-vibrant/browser";
import gsap from "gsap";
import {
  ColorfulBackgroundGenerator,
  ColorfulBackgroundLayer,
} from "./helper/colorful-background-ts";

// ==================== MAIN =========================
async function main() {
  while (!Spicetify?.showNotification) {
    await new Promise((resolve) => setTimeout(resolve, 100));
  }
  initializeThemeExtension();
}

// Extract colors from cover art and generate gradient layers
function applyGradientFromCoverArt(): void {
  const coverArt = document.querySelector<HTMLImageElement>(
    ".main-nowPlayingWidget-coverArt img"
  );

  if (!(coverArt && coverArt.src)) {
    console.warn("Cover art not found or source is missing.");
    return;
  }

  const proxyUrl = getProxyImageUrl(coverArt.src);
  console.log("Using proxy URL for cover art:", proxyUrl);

  Vibrant.from(proxyUrl)
    .getPalette()
    .then((palette) => {
      if (!palette) {
        console.error("Palette extraction failed");
        return;
      }

      // Extract all colors from the palette
      const layers: ColorfulBackgroundLayer[] = [];
      Object.keys(palette).forEach((key) => {
        const color = palette[key as keyof typeof palette];
        if (color && color.hex) {
          // In this version we may randomize slightly—but you can adjust the parameters as needed.
          const layer = generateGradientLayer(color.hex);
          layers.push(layer);
        }
      });

      // Apply the combined gradient to the container
      generateDynamicGradient(layers);
    })
    .catch((error) => console.error("Error extracting colors:", error));
}

// Generate a gradient layer based on a hex color; adjust position stops to avoid full blocking.
function generateGradientLayer(hex: string): ColorfulBackgroundLayer {
  const hsl = hexToHSL(hex);
  // Here we set the parameters so that we avoid extreme stops.
  // For example, if posColor comes out as 0, we bump it to 5 to avoid a fully opaque edge.
  const posColor = Math.max(5, Math.min(95, Math.random() * 100));
  // Similarly, adjust posTransparency to avoid it being exactly 100.
  const posTransparency = Math.max(5, Math.min(95, Math.random() * 100));

  return new ColorfulBackgroundLayer({
    // You can either use a random degree or a preset one.
    degree: Math.random() * 360,
    hue: hsl.h,
    saturation: hsl.s,
    lightness: hsl.l,
    posColor,
    posTransparency,
  });
}

// Convert hex to HSL with saturation and lightness returned as fractions (0–1)
function hexToHSL(hex: string): { h: number; s: number; l: number } {
  const r = parseInt(hex.slice(1, 3), 16) / 255;
  const g = parseInt(hex.slice(3, 5), 16) / 255;
  const b = parseInt(hex.slice(5, 7), 16) / 255;
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  let h = 0,
    s = 0,
    l = (max + min) / 2;
  if (max !== min) {
    const d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = ((g - b) / d + (g < b ? 6 : 0)) * 60;
        break;
      case g:
        h = ((b - r) / d + 2) * 60;
        break;
      case b:
        h = ((r - g) / d + 4) * 60;
        break;
    }
  }
  return { h: Math.round(h), s, l };
}

// Compose the overall gradient CSS string and assign it to .Root__top-container.
// We reverse the order so that layers meant to be “on top” (with more transparency) are painted above.
function generateDynamicGradient(layers: ColorfulBackgroundLayer[]): void {
  // Reverse the layer order. (CSS paints the first listed image on top.)

  // Build a raw CSS string from each layer.
  const rawCSS = layers
    .map((layer, index) => {
      const isLast = index === layers.length - 1;
      return layer.getCSSProperty(isLast, "");
    })
    .join("");
  // Remove any trailing commas, semicolons, or extra whitespace.
  const gradientCSS = rawCSS.replace(/[,;]\s*$/, "");
  console.log("Final gradient CSS:", gradientCSS);

  // Target the container element.
  const container = document.querySelector<HTMLElement>(".Root__top-container");
  if (!container) {
    console.error("Container .Root__top-container not found.");
    return;
  }

  // Apply the composed gradient and set a blend mode to let layers mix.
  container.style.background = gradientCSS;
  container.style.backgroundBlendMode = "difference"; // or try "multiply"
  //luminocity or difference looks cool

  console.log("Applied container background:", container.style.background);

  // Optionally animate the background change using GSAP on the container.
  gsap.to(container, {
    background: gradientCSS,
    duration: 1.5,
    ease: "power2.inOut",
    onUpdate: () => console.log("Gradient is morphing..."),
    onComplete: () => console.log("Gradient morph completed."),
  });
}

// Adjust Spotify URI to a proxy URL.
function getProxyImageUrl(spotifyUri: string): string {
  return spotifyUri.replace("spotify:image:", "https://i.scdn.co/image/");
}

// Watching the now-playing element for changes, so the gradient is updated when track changes.
function initializeThemeExtension(): void {
  const nowPlayingBar = document.querySelector<HTMLElement>(
    ".main-nowPlayingWidget-trackInfo"
  );
  if (!nowPlayingBar) {
    console.error("Now-playing bar not found.");
    return;
  }
  console.log("Now-playing bar found:", nowPlayingBar);

  const observer = new MutationObserver(() => {
    console.log("Now-playing bar content changed");
    applyGradientFromCoverArt();
  });
  observer.observe(nowPlayingBar, { childList: true, subtree: true });

  // Initial application.
  applyGradientFromCoverArt();
}

export default main;
